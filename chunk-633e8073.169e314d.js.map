{"version":3,"sources":["webpack:///./node_modules/@ledgerhq/hw-app-eth/lib-es/Eth.js","webpack:///./node_modules/@ledgerhq/hw-app-eth/lib-es/utils.js","webpack:///./node_modules/@ledgerhq/errors/dist/index.js"],"names":["starkQuantizationTypeMap","eth","erc20","erc721","erc20mintable","erc721mintable","hexBuffer","str","Buffer","from","startsWith","slice","maybeHexBuffer","remapTransactionRelatedErrors","e","statusCode","Eth","transport","scrambleKey","this","decorateAppAPIMethods","path","boolDisplay","boolChaincode","paths","buffer","alloc","length","forEach","element","index","writeUInt32BE","send","then","response","result","publicKeyLength","addressLength","publicKey","toString","address","chainCode","data","rawTxHex","offset","rawTx","toSend","rlpTx","rlpOffset","chainIdPrefix","rlpVrs","chainIdSrc","chainIdBuf","copy","readUInt32BE","maxChunkSize","chunkSize","push","i","apduResponse","v","r","s","arbitraryDataEnabled","erc20ProvisioningNecessary","starkEnabled","starkv2Supported","version","messageHex","message","domainSeparatorHex","hashStructMessageHex","domainSeparator","hashStruct","sourceTokenAddress","sourceQuantization","destinationTokenAddress","destinationQuantization","sourceVault","destinationVault","amountSell","amountBuy","nonce","timestamp","sourceTokenAddressHex","destinationTokenAddressHex","padStart","sourceQuantizationType","sourceMintableBlobOrTokenId","destinationQuantizationType","destinationMintableBlobOrTokenId","Error","transferTokenAddress","transferQuantization","targetPublicKey","amountTransfer","transferTokenAddressHex","targetPublicKeyHex","transferQuantizationType","transferMintableBlobOrTokenId","conditionalTransferAddress","conditionalTransferFact","conditionalTransferAddressHex","operationContract","operationQuantization","operationContractHex","operationQuantizationType","operationMintableBlobOrTokenId","hash","hashHex","withdrawalIndex","splitPath","components","split","number","parseInt","isNaN","foreach","arr","callback","iterate","array","res","Promise","resolve","errorClasses","deserializers","addCustomErrorDeserializer","name","deserializer","createCustomErrorClass","C","fields","Object","assign","stack","prototype","EthAppPleaseEnableContractData","TransportRaceCondition","TransportError","id","StatusCodes","PIN_REMAINING_ATTEMPTS","INCORRECT_LENGTH","MISSING_CRITICAL_PARAMETER","COMMAND_INCOMPATIBLE_FILE_STRUCTURE","SECURITY_STATUS_NOT_SATISFIED","CONDITIONS_OF_USE_NOT_SATISFIED","INCORRECT_DATA","NOT_ENOUGH_MEMORY_SPACE","REFERENCED_DATA_NOT_FOUND","FILE_ALREADY_EXISTS","INCORRECT_P1_P2","INS_NOT_SUPPORTED","CLA_NOT_SUPPORTED","TECHNICAL_PROBLEM","OK","MEMORY_PROBLEM","NO_EF_SELECTED","INVALID_OFFSET","FILE_NOT_FOUND","INCONSISTENT_FILE","ALGORITHM_NOT_SUPPORTED","INVALID_KCV","CODE_NOT_INITIALIZED","ACCESS_CONDITION_NOT_FULFILLED","CONTRADICTION_SECRET_CODE_STATUS","CONTRADICTION_INVALIDATION","CODE_BLOCKED","MAX_VALUE_REACHED","GP_AUTH_FAILED","LICENSING","HALTED","getAltStatusMessage","code","TransportStatusError","statusText","keys","find","k","smsg","statusCodeStr"],"mappings":"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","file":"js/chunk-633e8073.169e314d.js","sourcesContent":["/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// FIXME drop:\nimport { splitPath, foreach } from \"./utils\";\nimport { EthAppPleaseEnableContractData } from \"@ledgerhq/errors\";\nimport { BigNumber } from \"bignumber.js\";\nimport { encode, decode } from \"rlp\";\nconst starkQuantizationTypeMap = {\n  eth: 1,\n  erc20: 2,\n  erc721: 3,\n  erc20mintable: 4,\n  erc721mintable: 5\n};\n\nfunction hexBuffer(str) {\n  return Buffer.from(str.startsWith(\"0x\") ? str.slice(2) : str, \"hex\");\n}\n\nfunction maybeHexBuffer(str) {\n  if (!str) return null;\n  return hexBuffer(str);\n}\n\nconst remapTransactionRelatedErrors = e => {\n  if (e && e.statusCode === 0x6a80) {\n    return new EthAppPleaseEnableContractData(\"Please enable Contract data on the Ethereum app Settings\");\n  }\n\n  return e;\n};\n/**\n * Ethereum API\n *\n * @example\n * import Eth from \"@ledgerhq/hw-app-eth\";\n * const eth = new Eth(transport)\n */\n\n\nexport default class Eth {\n  constructor(transport, scrambleKey = \"w0w\") {\n    this.transport = void 0;\n    this.transport = transport;\n    transport.decorateAppAPIMethods(this, [\"getAddress\", \"provideERC20TokenInformation\", \"signTransaction\", \"signPersonalMessage\", \"getAppConfiguration\", \"signEIP712HashedMessage\", \"starkGetPublicKey\", \"starkSignOrder\", \"starkSignOrder_v2\", \"starkSignTransfer\", \"starkSignTransfer_v2\", \"starkProvideQuantum\", \"starkProvideQuantum_v2\", \"starkUnsafeSign\", \"eth2GetPublicKey\", \"eth2SetWithdrawalIndex\"], scrambleKey);\n  }\n  /**\n   * get Ethereum address for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @option boolChaincode optionally enable or not the chaincode request\n   * @return an object with a publicKey, address and (optionally) chainCode\n   * @example\n   * eth.getAddress(\"44'/60'/0'/0/0\").then(o => o.address)\n   */\n\n\n  getAddress(path, boolDisplay, boolChaincode) {\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport.send(0xe0, 0x02, boolDisplay ? 0x01 : 0x00, boolChaincode ? 0x01 : 0x00, buffer).then(response => {\n      let result = {};\n      let publicKeyLength = response[0];\n      let addressLength = response[1 + publicKeyLength];\n      result.publicKey = response.slice(1, 1 + publicKeyLength).toString(\"hex\");\n      result.address = \"0x\" + response.slice(1 + publicKeyLength + 1, 1 + publicKeyLength + 1 + addressLength).toString(\"ascii\");\n\n      if (boolChaincode) {\n        result.chainCode = response.slice(1 + publicKeyLength + 1 + addressLength, 1 + publicKeyLength + 1 + addressLength + 32).toString(\"hex\");\n      }\n\n      return result;\n    });\n  }\n  /**\n   * This commands provides a trusted description of an ERC 20 token\n   * to associate a contract address with a ticker and number of decimals.\n   *\n   * It shall be run immediately before performing a transaction involving a contract\n   * calling this contract address to display the proper token information to the user if necessary.\n   *\n   * @param {*} info: a blob from \"erc20.js\" utilities that contains all token information.\n   *\n   * @example\n   * import { byContractAddress } from \"@ledgerhq/hw-app-eth/erc20\"\n   * const zrxInfo = byContractAddress(\"0xe41d2489571d322189246dafa5ebde1f4699f498\")\n   * if (zrxInfo) await appEth.provideERC20TokenInformation(zrxInfo)\n   * const signed = await appEth.signTransaction(path, rawTxHex)\n   */\n\n\n  provideERC20TokenInformation({\n    data\n  }) {\n    return this.transport.send(0xe0, 0x0a, 0x00, 0x00, data).then(() => true, e => {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for older version of ETH app, since older app version had the ERC20 data hardcoded, it's fine to assume it worked.\n        // we return a flag to know if the call was effective or not\n        return false;\n      }\n\n      throw e;\n    });\n  }\n  /**\n   * You can sign a transaction and retrieve v, r, s given the raw transaction and the BIP 32 path of the account to sign\n   * @example\n   eth.signTransaction(\"44'/60'/0'/0/0\", \"e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080\").then(result => ...)\n   */\n\n\n  signTransaction(path, rawTxHex) {\n    let paths = splitPath(path);\n    let offset = 0;\n    let rawTx = Buffer.from(rawTxHex, \"hex\");\n    let toSend = [];\n    let response; // Check if the TX is encoded following EIP 155\n\n    let rlpTx = decode(rawTx);\n    let rlpOffset = 0;\n    let chainIdPrefix = \"\";\n\n    if (rlpTx.length > 6) {\n      let rlpVrs = encode(rlpTx.slice(-3));\n      rlpOffset = rawTx.length - (rlpVrs.length - 1);\n      const chainIdSrc = rlpTx[6];\n      const chainIdBuf = Buffer.alloc(4);\n      chainIdSrc.copy(chainIdBuf, 4 - chainIdSrc.length);\n      chainIdPrefix = (chainIdBuf.readUInt32BE(0) * 2 + 35).toString(16).slice(0, -2); // Drop the low byte, that comes from the ledger.\n\n      if (chainIdPrefix.length % 2 === 1) {\n        chainIdPrefix = \"0\" + chainIdPrefix;\n      }\n    }\n\n    while (offset !== rawTx.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 : 150;\n      let chunkSize = offset + maxChunkSize > rawTx.length ? rawTx.length - offset : maxChunkSize;\n\n      if (rlpOffset != 0 && offset + chunkSize == rlpOffset) {\n        // Make sure that the chunk doesn't end right on the EIP 155 marker if set\n        chunkSize--;\n      }\n\n      let buffer = Buffer.alloc(offset === 0 ? 1 + paths.length * 4 + chunkSize : chunkSize);\n\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        rawTx.copy(buffer, 1 + 4 * paths.length, offset, offset + chunkSize);\n      } else {\n        rawTx.copy(buffer, 0, offset, offset + chunkSize);\n      }\n\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n\n    return foreach(toSend, (data, i) => this.transport.send(0xe0, 0x04, i === 0 ? 0x00 : 0x80, 0x00, data).then(apduResponse => {\n      response = apduResponse;\n    })).then(() => {\n      const v = chainIdPrefix + response.slice(0, 1).toString(\"hex\");\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        v,\n        r,\n        s\n      };\n    }, e => {\n      throw remapTransactionRelatedErrors(e);\n    });\n  }\n  /**\n   */\n\n\n  getAppConfiguration() {\n    return this.transport.send(0xe0, 0x06, 0x00, 0x00).then(response => {\n      let result = {};\n      result.arbitraryDataEnabled = response[0] & 0x01;\n      result.erc20ProvisioningNecessary = response[0] & 0x02;\n      result.starkEnabled = response[0] & 0x04;\n      result.starkv2Supported = response[0] & 0x08;\n      result.version = \"\" + response[1] + \".\" + response[2] + \".\" + response[3];\n      return result;\n    });\n  }\n  /**\n  * You can sign a message according to eth_sign RPC call and retrieve v, r, s given the message and the BIP 32 path of the account to sign.\n  * @example\n  eth.signPersonalMessage(\"44'/60'/0'/0/0\", Buffer.from(\"test\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n  })\n   */\n\n\n  signPersonalMessage(path, messageHex) {\n    let paths = splitPath(path);\n    let offset = 0;\n    let message = Buffer.from(messageHex, \"hex\");\n    let toSend = [];\n    let response;\n\n    while (offset !== message.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 - 4 : 150;\n      let chunkSize = offset + maxChunkSize > message.length ? message.length - offset : maxChunkSize;\n      let buffer = Buffer.alloc(offset === 0 ? 1 + paths.length * 4 + 4 + chunkSize : chunkSize);\n\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        buffer.writeUInt32BE(message.length, 1 + 4 * paths.length);\n        message.copy(buffer, 1 + 4 * paths.length + 4, offset, offset + chunkSize);\n      } else {\n        message.copy(buffer, 0, offset, offset + chunkSize);\n      }\n\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n\n    return foreach(toSend, (data, i) => this.transport.send(0xe0, 0x08, i === 0 ? 0x00 : 0x80, 0x00, data).then(apduResponse => {\n      response = apduResponse;\n    })).then(() => {\n      const v = response[0];\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        v,\n        r,\n        s\n      };\n    });\n  }\n  /**\n  * Sign a prepared message following web3.eth.signTypedData specification. The host computes the domain separator and hashStruct(message)\n  * @example\n  eth.signEIP712HashedMessage(\"44'/60'/0'/0/0\", Buffer.from(\"0101010101010101010101010101010101010101010101010101010101010101\").toString(\"hex\"), Buffer.from(\"0202020202020202020202020202020202020202020202020202020202020202\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n  })\n   */\n\n\n  signEIP712HashedMessage(path, domainSeparatorHex, hashStructMessageHex) {\n    const domainSeparator = hexBuffer(domainSeparatorHex);\n    const hashStruct = hexBuffer(hashStructMessageHex);\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 32 + 32, 0);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    domainSeparator.copy(buffer, offset);\n    offset += 32;\n    hashStruct.copy(buffer, offset);\n    return this.transport.send(0xe0, 0x0c, 0x00, 0x00, buffer).then(response => {\n      const v = response[0];\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        v,\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * get Stark public key for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @return the Stark public key\n   */\n\n\n  starkGetPublicKey(path, boolDisplay) {\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport.send(0xf0, 0x02, boolDisplay ? 0x01 : 0x00, 0x00, buffer).then(response => {\n      return response.slice(0, response.length - 2);\n    });\n  }\n  /**\n   * sign a Stark order\n   * @param path a path in BIP 32 format\n   * @option sourceTokenAddress contract address of the source token (not present for ETH)\n   * @param sourceQuantization quantization used for the source token\n   * @option destinationTokenAddress contract address of the destination token (not present for ETH)\n   * @param destinationQuantization quantization used for the destination token\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountSell amount to sell\n   * @param amountBuy amount to buy\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n\n\n  starkSignOrder(path, sourceTokenAddress, sourceQuantization, destinationTokenAddress, destinationQuantization, sourceVault, destinationVault, amountSell, amountBuy, nonce, timestamp) {\n    const sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);\n    const destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 20 + 32 + 20 + 32 + 4 + 4 + 8 + 8 + 4 + 4, 0);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n\n    if (sourceTokenAddressHex) {\n      sourceTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(sourceQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 32;\n\n    if (destinationTokenAddressHex) {\n      destinationTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(destinationQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountSell.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    Buffer.from(amountBuy.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport.send(0xf0, 0x04, 0x01, 0x00, buffer).then(response => {\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * sign a Stark order using the Starkex V2 protocol\n   * @param path a path in BIP 32 format\n   * @option sourceTokenAddress contract address of the source token (not present for ETH)\n   * @param sourceQuantizationType quantization type used for the source token\n   * @option sourceQuantization quantization used for the source token (not present for erc 721 or mintable erc 721)\n   * @option sourceMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the source token\n   * @option destinationTokenAddress contract address of the destination token (not present for ETH)\n   * @param destinationQuantizationType quantization type used for the destination token\n   * @option destinationQuantization quantization used for the destination token (not present for erc 721 or mintable erc 721)\n   * @option destinationMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the destination token\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountSell amount to sell\n   * @param amountBuy amount to buy\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n\n\n  starkSignOrder_v2(path, sourceTokenAddress, sourceQuantizationType, sourceQuantization, sourceMintableBlobOrTokenId, destinationTokenAddress, destinationQuantizationType, destinationQuantization, destinationMintableBlobOrTokenId, sourceVault, destinationVault, amountSell, amountBuy, nonce, timestamp) {\n    const sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);\n    const destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);\n\n    if (!(sourceQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\"eth.starkSignOrderv2 invalid source quantization type=\" + sourceQuantizationType);\n    }\n\n    if (!(destinationQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\"eth.starkSignOrderv2 invalid destination quantization type=\" + destinationQuantizationType);\n    }\n\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 1 + 20 + 32 + 32 + 1 + 20 + 32 + 32 + 4 + 4 + 8 + 8 + 4 + 4, 0);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    buffer[offset] = starkQuantizationTypeMap[sourceQuantizationType];\n    offset++;\n\n    if (sourceTokenAddressHex) {\n      sourceTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (sourceQuantization) {\n      Buffer.from(sourceQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (sourceMintableBlobOrTokenId) {\n      Buffer.from(sourceMintableBlobOrTokenId.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n    buffer[offset] = starkQuantizationTypeMap[destinationQuantizationType];\n    offset++;\n\n    if (destinationTokenAddressHex) {\n      destinationTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (destinationQuantization) {\n      Buffer.from(destinationQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (destinationMintableBlobOrTokenId) {\n      Buffer.from(destinationMintableBlobOrTokenId.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountSell.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    Buffer.from(amountBuy.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport.send(0xf0, 0x04, 0x03, 0x00, buffer).then(response => {\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * sign a Stark transfer\n   * @param path a path in BIP 32 format\n   * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)\n   * @param transferQuantization quantization used for the token to be transferred\n   * @param targetPublicKey target Stark public key\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountTransfer amount to transfer\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n\n\n  starkSignTransfer(path, transferTokenAddress, transferQuantization, targetPublicKey, sourceVault, destinationVault, amountTransfer, nonce, timestamp) {\n    const transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);\n    const targetPublicKeyHex = hexBuffer(targetPublicKey);\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 20 + 32 + 32 + 4 + 4 + 8 + 4 + 4, 0);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n\n    if (transferTokenAddressHex) {\n      transferTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(transferQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 32;\n    targetPublicKeyHex.copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountTransfer.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport.send(0xf0, 0x04, 0x02, 0x00, buffer).then(response => {\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * sign a Stark transfer or conditional transfer using the Starkex V2 protocol\n   * @param path a path in BIP 32 format\n   * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)\n   * @param transferQuantizationType quantization type used for the token to be transferred\n   * @option transferQuantization quantization used for the token to be transferred (not present for erc 721 or mintable erc 721)\n   * @option transferMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the token to be transferred\n   * @param targetPublicKey target Stark public key\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountTransfer amount to transfer\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @option conditionalTransferAddress onchain address of the condition for a conditional transfer\n   * @option conditionalTransferFact fact associated to the condition for a conditional transfer\n   * @return the signature\n   */\n\n\n  starkSignTransfer_v2(path, transferTokenAddress, transferQuantizationType, transferQuantization, transferMintableBlobOrTokenId, targetPublicKey, sourceVault, destinationVault, amountTransfer, nonce, timestamp, conditionalTransferAddress, conditionalTransferFact) {\n    const transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);\n    const targetPublicKeyHex = hexBuffer(targetPublicKey);\n    const conditionalTransferAddressHex = maybeHexBuffer(conditionalTransferAddress);\n\n    if (!(transferQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\"eth.starkSignTransferv2 invalid quantization type=\" + transferQuantizationType);\n    }\n\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 1 + 20 + 32 + 32 + 32 + 4 + 4 + 8 + 4 + 4 + (conditionalTransferAddressHex ? 32 + 20 : 0), 0);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    buffer[offset] = starkQuantizationTypeMap[transferQuantizationType];\n    offset++;\n\n    if (transferTokenAddressHex) {\n      transferTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (transferQuantization) {\n      Buffer.from(transferQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (transferMintableBlobOrTokenId) {\n      Buffer.from(transferMintableBlobOrTokenId.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n    targetPublicKeyHex.copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountTransfer.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n\n    if (conditionalTransferAddressHex && conditionalTransferFact) {\n      offset += 4;\n      Buffer.from(conditionalTransferFact.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n      offset += 32;\n      conditionalTransferAddressHex.copy(buffer, offset);\n    }\n\n    return this.transport.send(0xf0, 0x04, conditionalTransferAddressHex ? 0x05 : 0x04, 0x00, buffer).then(response => {\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * provide quantization information before singing a deposit or withdrawal Stark powered contract call\n   *\n   * It shall be run following a provideERC20TokenInformation call for the given contract\n   *\n   * @param operationContract contract address of the token to be transferred (not present for ETH)\n   * @param operationQuantization quantization used for the token to be transferred\n   */\n\n\n  starkProvideQuantum(operationContract, operationQuantization) {\n    const operationContractHex = maybeHexBuffer(operationContract);\n    let buffer = Buffer.alloc(20 + 32, 0);\n\n    if (operationContractHex) {\n      operationContractHex.copy(buffer, 0);\n    }\n\n    Buffer.from(operationQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, 20);\n    return this.transport.send(0xf0, 0x08, 0x00, 0x00, buffer).then(() => true, e => {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for ETH application versions not supporting Stark extensions\n        return false;\n      }\n\n      throw e;\n    });\n  }\n  /**\n   * provide quantization information before singing a deposit or withdrawal Stark powered contract call using the Starkex V2 protocol\n   *\n   * It shall be run following a provideERC20TokenInformation call for the given contract\n   *\n   * @param operationContract contract address of the token to be transferred (not present for ETH)\n   * @param operationQuantizationType quantization type of the token to be transferred\n   * @option operationQuantization quantization used for the token to be transferred (not present for erc 721 or mintable erc 721)\n   * @option operationMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) of the token to be transferred\n   */\n\n\n  starkProvideQuantum_v2(operationContract, operationQuantizationType, operationQuantization, operationMintableBlobOrTokenId) {\n    const operationContractHex = maybeHexBuffer(operationContract);\n\n    if (!(operationQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\"eth.starkProvideQuantumV2 invalid quantization type=\" + operationQuantizationType);\n    }\n\n    let buffer = Buffer.alloc(20 + 32 + 32, 0);\n    let offset = 0;\n\n    if (operationContractHex) {\n      operationContractHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (operationQuantization) {\n      Buffer.from(operationQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (operationMintableBlobOrTokenId) {\n      Buffer.from(operationMintableBlobOrTokenId.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    return this.transport.send(0xf0, 0x08, starkQuantizationTypeMap[operationQuantizationType], 0x00, buffer).then(() => true, e => {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for ETH application versions not supporting Stark extensions\n        return false;\n      }\n\n      throw e;\n    });\n  }\n  /**\n   * sign the given hash over the Stark curve\n   * It is intended for speed of execution in case an unknown Stark model is pushed and should be avoided as much as possible.\n   * @param path a path in BIP 32 format\n   * @param hash hexadecimal hash to sign\n   * @return the signature\n   */\n\n\n  starkUnsafeSign(path, hash) {\n    const hashHex = hexBuffer(hash);\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 32);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    hashHex.copy(buffer, offset);\n    return this.transport.send(0xf0, 0x0a, 0x00, 0x00, buffer).then(response => {\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * get an Ethereum 2 BLS-12 381 public key for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @return an object with a publicKey\n   * @example\n   * eth.eth2GetPublicKey(\"12381/3600/0/0\").then(o => o.publicKey)\n   */\n\n\n  eth2GetPublicKey(path, boolDisplay) {\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport.send(0xe0, 0x0e, boolDisplay ? 0x01 : 0x00, 0x00, buffer).then(response => {\n      let result = {};\n      result.publicKey = response.slice(0, -2).toString(\"hex\");\n      return result;\n    });\n  }\n  /**\n   * Set the index of a Withdrawal key used as withdrawal credentials in an ETH 2 deposit contract call signature\n   *\n   * It shall be run before the ETH 2 deposit transaction is signed. If not called, the index is set to 0\n   *\n   * @param withdrawalIndex index path in the EIP 2334 path m/12381/3600/withdrawalIndex/0\n   * @return True if the method was executed successfully\n   */\n\n\n  eth2SetWithdrawalIndex(withdrawalIndex) {\n    let buffer = Buffer.alloc(4, 0);\n    buffer.writeUInt32BE(withdrawalIndex, 0);\n    return this.transport.send(0xe0, 0x10, 0x00, 0x00, buffer).then(() => true, e => {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for ETH application versions not supporting ETH 2\n        return false;\n      }\n\n      throw e;\n    });\n  }\n\n}\n//# sourceMappingURL=Eth.js.map","/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\nexport function defer() {\n  let resolve, reject;\n  let promise = new Promise(function (success, failure) {\n    resolve = success;\n    reject = failure;\n  });\n  if (!resolve || !reject) throw \"defer() error\"; // this never happens and is just to make flow happy\n\n  return {\n    promise,\n    resolve,\n    reject\n  };\n} // TODO use bip32-path library\n\nexport function splitPath(path) {\n  let result = [];\n  let components = path.split(\"/\");\n  components.forEach(element => {\n    let number = parseInt(element, 10);\n\n    if (isNaN(number)) {\n      return; // FIXME shouldn't it throws instead?\n    }\n\n    if (element.length > 1 && element[element.length - 1] === \"'\") {\n      number += 0x80000000;\n    }\n\n    result.push(number);\n  });\n  return result;\n} // TODO use async await\n\nexport function eachSeries(arr, fun) {\n  return arr.reduce((p, e) => p.then(() => fun(e)), Promise.resolve());\n}\nexport function foreach(arr, callback) {\n  function iterate(index, array, result) {\n    if (index >= array.length) {\n      return result;\n    } else return callback(array[index], index).then(function (res) {\n      result.push(res);\n      return iterate(index + 1, array, result);\n    });\n  }\n\n  return Promise.resolve().then(() => iterate(0, arr, []));\n}\nexport function doIf(condition, callback) {\n  return Promise.resolve().then(() => {\n    if (condition) {\n      return callback();\n    }\n  });\n}\nexport function asyncWhile(predicate, callback) {\n  function iterate(result) {\n    if (!predicate()) {\n      return result;\n    } else {\n      return callback().then(res => {\n        result.push(res);\n        return iterate(result);\n      });\n    }\n  }\n\n  return Promise.resolve([]).then(iterate);\n}\n//# sourceMappingURL=utils.js.map","/* eslint-disable no-continue */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-prototype-builtins */\r\nvar errorClasses = {};\r\nvar deserializers = {};\r\nvar addCustomErrorDeserializer = function (name, deserializer) {\r\n    deserializers[name] = deserializer;\r\n};\r\nvar createCustomErrorClass = function (name) {\r\n    var C = function CustomError(message, fields) {\r\n        Object.assign(this, fields);\r\n        this.name = name;\r\n        this.message = message || name;\r\n        this.stack = new Error().stack;\r\n    };\r\n    C.prototype = new Error();\r\n    errorClasses[name] = C;\r\n    return C;\r\n};\r\n// inspired from https://github.com/programble/errio/blob/master/index.js\r\nvar deserializeError = function (object) {\r\n    if (typeof object === \"object\" && object) {\r\n        try {\r\n            // $FlowFixMe FIXME HACK\r\n            var msg = JSON.parse(object.message);\r\n            if (msg.message && msg.name) {\r\n                object = msg;\r\n            }\r\n        }\r\n        catch (e) {\r\n            // nothing\r\n        }\r\n        var error = void 0;\r\n        if (typeof object.name === \"string\") {\r\n            var name_1 = object.name;\r\n            var des = deserializers[name_1];\r\n            if (des) {\r\n                error = des(object);\r\n            }\r\n            else {\r\n                var constructor = name_1 === \"Error\" ? Error : errorClasses[name_1];\r\n                if (!constructor) {\r\n                    console.warn(\"deserializing an unknown class '\" + name_1 + \"'\");\r\n                    constructor = createCustomErrorClass(name_1);\r\n                }\r\n                error = Object.create(constructor.prototype);\r\n                try {\r\n                    for (var prop in object) {\r\n                        if (object.hasOwnProperty(prop)) {\r\n                            error[prop] = object[prop];\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // sometimes setting a property can fail (e.g. .name)\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            error = new Error(object.message);\r\n        }\r\n        if (!error.stack && Error.captureStackTrace) {\r\n            Error.captureStackTrace(error, deserializeError);\r\n        }\r\n        return error;\r\n    }\r\n    return new Error(String(object));\r\n};\r\n// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js\r\nvar serializeError = function (value) {\r\n    if (!value)\r\n        return value;\r\n    if (typeof value === \"object\") {\r\n        return destroyCircular(value, []);\r\n    }\r\n    if (typeof value === \"function\") {\r\n        return \"[Function: \" + (value.name || \"anonymous\") + \"]\";\r\n    }\r\n    return value;\r\n};\r\n// https://www.npmjs.com/package/destroy-circular\r\nfunction destroyCircular(from, seen) {\r\n    var to = {};\r\n    seen.push(from);\r\n    for (var _i = 0, _a = Object.keys(from); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        var value = from[key];\r\n        if (typeof value === \"function\") {\r\n            continue;\r\n        }\r\n        if (!value || typeof value !== \"object\") {\r\n            to[key] = value;\r\n            continue;\r\n        }\r\n        if (seen.indexOf(from[key]) === -1) {\r\n            to[key] = destroyCircular(from[key], seen.slice(0));\r\n            continue;\r\n        }\r\n        to[key] = \"[Circular]\";\r\n    }\r\n    if (typeof from.name === \"string\") {\r\n        to.name = from.name;\r\n    }\r\n    if (typeof from.message === \"string\") {\r\n        to.message = from.message;\r\n    }\r\n    if (typeof from.stack === \"string\") {\r\n        to.stack = from.stack;\r\n    }\r\n    return to;\r\n}\n\nvar AccountNameRequiredError = createCustomErrorClass(\"AccountNameRequired\");\r\nvar AccountNotSupported = createCustomErrorClass(\"AccountNotSupported\");\r\nvar AmountRequired = createCustomErrorClass(\"AmountRequired\");\r\nvar BluetoothRequired = createCustomErrorClass(\"BluetoothRequired\");\r\nvar BtcUnmatchedApp = createCustomErrorClass(\"BtcUnmatchedApp\");\r\nvar CantOpenDevice = createCustomErrorClass(\"CantOpenDevice\");\r\nvar CashAddrNotSupported = createCustomErrorClass(\"CashAddrNotSupported\");\r\nvar CurrencyNotSupported = createCustomErrorClass(\"CurrencyNotSupported\");\r\nvar DeviceAppVerifyNotSupported = createCustomErrorClass(\"DeviceAppVerifyNotSupported\");\r\nvar DeviceGenuineSocketEarlyClose = createCustomErrorClass(\"DeviceGenuineSocketEarlyClose\");\r\nvar DeviceNotGenuineError = createCustomErrorClass(\"DeviceNotGenuine\");\r\nvar DeviceOnDashboardExpected = createCustomErrorClass(\"DeviceOnDashboardExpected\");\r\nvar DeviceOnDashboardUnexpected = createCustomErrorClass(\"DeviceOnDashboardUnexpected\");\r\nvar DeviceInOSUExpected = createCustomErrorClass(\"DeviceInOSUExpected\");\r\nvar DeviceHalted = createCustomErrorClass(\"DeviceHalted\");\r\nvar DeviceNameInvalid = createCustomErrorClass(\"DeviceNameInvalid\");\r\nvar DeviceSocketFail = createCustomErrorClass(\"DeviceSocketFail\");\r\nvar DeviceSocketNoBulkStatus = createCustomErrorClass(\"DeviceSocketNoBulkStatus\");\r\nvar DisconnectedDevice = createCustomErrorClass(\"DisconnectedDevice\");\r\nvar DisconnectedDeviceDuringOperation = createCustomErrorClass(\"DisconnectedDeviceDuringOperation\");\r\nvar EnpointConfigError = createCustomErrorClass(\"EnpointConfig\");\r\nvar EthAppPleaseEnableContractData = createCustomErrorClass(\"EthAppPleaseEnableContractData\");\r\nvar FeeEstimationFailed = createCustomErrorClass(\"FeeEstimationFailed\");\r\nvar FirmwareNotRecognized = createCustomErrorClass(\"FirmwareNotRecognized\");\r\nvar HardResetFail = createCustomErrorClass(\"HardResetFail\");\r\nvar InvalidXRPTag = createCustomErrorClass(\"InvalidXRPTag\");\r\nvar InvalidAddress = createCustomErrorClass(\"InvalidAddress\");\r\nvar InvalidAddressBecauseDestinationIsAlsoSource = createCustomErrorClass(\"InvalidAddressBecauseDestinationIsAlsoSource\");\r\nvar LatestMCUInstalledError = createCustomErrorClass(\"LatestMCUInstalledError\");\r\nvar UnknownMCU = createCustomErrorClass(\"UnknownMCU\");\r\nvar LedgerAPIError = createCustomErrorClass(\"LedgerAPIError\");\r\nvar LedgerAPIErrorWithMessage = createCustomErrorClass(\"LedgerAPIErrorWithMessage\");\r\nvar LedgerAPINotAvailable = createCustomErrorClass(\"LedgerAPINotAvailable\");\r\nvar ManagerAppAlreadyInstalledError = createCustomErrorClass(\"ManagerAppAlreadyInstalled\");\r\nvar ManagerAppRelyOnBTCError = createCustomErrorClass(\"ManagerAppRelyOnBTC\");\r\nvar ManagerAppDepInstallRequired = createCustomErrorClass(\"ManagerAppDepInstallRequired\");\r\nvar ManagerAppDepUninstallRequired = createCustomErrorClass(\"ManagerAppDepUninstallRequired\");\r\nvar ManagerDeviceLockedError = createCustomErrorClass(\"ManagerDeviceLocked\");\r\nvar ManagerFirmwareNotEnoughSpaceError = createCustomErrorClass(\"ManagerFirmwareNotEnoughSpace\");\r\nvar ManagerNotEnoughSpaceError = createCustomErrorClass(\"ManagerNotEnoughSpace\");\r\nvar ManagerUninstallBTCDep = createCustomErrorClass(\"ManagerUninstallBTCDep\");\r\nvar NetworkDown = createCustomErrorClass(\"NetworkDown\");\r\nvar NoAddressesFound = createCustomErrorClass(\"NoAddressesFound\");\r\nvar NotEnoughBalance = createCustomErrorClass(\"NotEnoughBalance\");\r\nvar NotEnoughBalanceToDelegate = createCustomErrorClass(\"NotEnoughBalanceToDelegate\");\r\nvar NotEnoughBalanceInParentAccount = createCustomErrorClass(\"NotEnoughBalanceInParentAccount\");\r\nvar NotEnoughSpendableBalance = createCustomErrorClass(\"NotEnoughSpendableBalance\");\r\nvar NotEnoughBalanceBecauseDestinationNotCreated = createCustomErrorClass(\"NotEnoughBalanceBecauseDestinationNotCreated\");\r\nvar NoAccessToCamera = createCustomErrorClass(\"NoAccessToCamera\");\r\nvar NotEnoughGas = createCustomErrorClass(\"NotEnoughGas\");\r\nvar NotSupportedLegacyAddress = createCustomErrorClass(\"NotSupportedLegacyAddress\");\r\nvar GasLessThanEstimate = createCustomErrorClass(\"GasLessThanEstimate\");\r\nvar PasswordsDontMatchError = createCustomErrorClass(\"PasswordsDontMatch\");\r\nvar PasswordIncorrectError = createCustomErrorClass(\"PasswordIncorrect\");\r\nvar RecommendSubAccountsToEmpty = createCustomErrorClass(\"RecommendSubAccountsToEmpty\");\r\nvar RecommendUndelegation = createCustomErrorClass(\"RecommendUndelegation\");\r\nvar TimeoutTagged = createCustomErrorClass(\"TimeoutTagged\");\r\nvar UnexpectedBootloader = createCustomErrorClass(\"UnexpectedBootloader\");\r\nvar MCUNotGenuineToDashboard = createCustomErrorClass(\"MCUNotGenuineToDashboard\");\r\nvar RecipientRequired = createCustomErrorClass(\"RecipientRequired\");\r\nvar UnavailableTezosOriginatedAccountReceive = createCustomErrorClass(\"UnavailableTezosOriginatedAccountReceive\");\r\nvar UnavailableTezosOriginatedAccountSend = createCustomErrorClass(\"UnavailableTezosOriginatedAccountSend\");\r\nvar UpdateFetchFileFail = createCustomErrorClass(\"UpdateFetchFileFail\");\r\nvar UpdateIncorrectHash = createCustomErrorClass(\"UpdateIncorrectHash\");\r\nvar UpdateIncorrectSig = createCustomErrorClass(\"UpdateIncorrectSig\");\r\nvar UpdateYourApp = createCustomErrorClass(\"UpdateYourApp\");\r\nvar UserRefusedDeviceNameChange = createCustomErrorClass(\"UserRefusedDeviceNameChange\");\r\nvar UserRefusedAddress = createCustomErrorClass(\"UserRefusedAddress\");\r\nvar UserRefusedFirmwareUpdate = createCustomErrorClass(\"UserRefusedFirmwareUpdate\");\r\nvar UserRefusedAllowManager = createCustomErrorClass(\"UserRefusedAllowManager\");\r\nvar UserRefusedOnDevice = createCustomErrorClass(\"UserRefusedOnDevice\"); // TODO rename because it's just for transaction refusal\r\nvar TransportOpenUserCancelled = createCustomErrorClass(\"TransportOpenUserCancelled\");\r\nvar TransportInterfaceNotAvailable = createCustomErrorClass(\"TransportInterfaceNotAvailable\");\r\nvar TransportRaceCondition = createCustomErrorClass(\"TransportRaceCondition\");\r\nvar TransportWebUSBGestureRequired = createCustomErrorClass(\"TransportWebUSBGestureRequired\");\r\nvar DeviceShouldStayInApp = createCustomErrorClass(\"DeviceShouldStayInApp\");\r\nvar WebsocketConnectionError = createCustomErrorClass(\"WebsocketConnectionError\");\r\nvar WebsocketConnectionFailed = createCustomErrorClass(\"WebsocketConnectionFailed\");\r\nvar WrongDeviceForAccount = createCustomErrorClass(\"WrongDeviceForAccount\");\r\nvar WrongAppForCurrency = createCustomErrorClass(\"WrongAppForCurrency\");\r\nvar ETHAddressNonEIP = createCustomErrorClass(\"ETHAddressNonEIP\");\r\nvar CantScanQRCode = createCustomErrorClass(\"CantScanQRCode\");\r\nvar FeeNotLoaded = createCustomErrorClass(\"FeeNotLoaded\");\r\nvar FeeRequired = createCustomErrorClass(\"FeeRequired\");\r\nvar FeeTooHigh = createCustomErrorClass(\"FeeTooHigh\");\r\nvar SyncError = createCustomErrorClass(\"SyncError\");\r\nvar PairingFailed = createCustomErrorClass(\"PairingFailed\");\r\nvar GenuineCheckFailed = createCustomErrorClass(\"GenuineCheckFailed\");\r\nvar LedgerAPI4xx = createCustomErrorClass(\"LedgerAPI4xx\");\r\nvar LedgerAPI5xx = createCustomErrorClass(\"LedgerAPI5xx\");\r\nvar FirmwareOrAppUpdateRequired = createCustomErrorClass(\"FirmwareOrAppUpdateRequired\");\r\n// db stuff, no need to translate\r\nvar NoDBPathGiven = createCustomErrorClass(\"NoDBPathGiven\");\r\nvar DBWrongPassword = createCustomErrorClass(\"DBWrongPassword\");\r\nvar DBNotReset = createCustomErrorClass(\"DBNotReset\");\r\n/**\r\n * TransportError is used for any generic transport errors.\r\n * e.g. Error thrown when data received by exchanges are incorrect or if exchanged failed to communicate with the device for various reason.\r\n */\r\nfunction TransportError(message, id) {\r\n    this.name = \"TransportError\";\r\n    this.message = message;\r\n    this.stack = new Error().stack;\r\n    this.id = id;\r\n}\r\nTransportError.prototype = new Error();\r\naddCustomErrorDeserializer(\"TransportError\", function (e) { return new TransportError(e.message, e.id); });\r\nvar StatusCodes = {\r\n    PIN_REMAINING_ATTEMPTS: 0x63c0,\r\n    INCORRECT_LENGTH: 0x6700,\r\n    MISSING_CRITICAL_PARAMETER: 0x6800,\r\n    COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 0x6981,\r\n    SECURITY_STATUS_NOT_SATISFIED: 0x6982,\r\n    CONDITIONS_OF_USE_NOT_SATISFIED: 0x6985,\r\n    INCORRECT_DATA: 0x6a80,\r\n    NOT_ENOUGH_MEMORY_SPACE: 0x6a84,\r\n    REFERENCED_DATA_NOT_FOUND: 0x6a88,\r\n    FILE_ALREADY_EXISTS: 0x6a89,\r\n    INCORRECT_P1_P2: 0x6b00,\r\n    INS_NOT_SUPPORTED: 0x6d00,\r\n    CLA_NOT_SUPPORTED: 0x6e00,\r\n    TECHNICAL_PROBLEM: 0x6f00,\r\n    OK: 0x9000,\r\n    MEMORY_PROBLEM: 0x9240,\r\n    NO_EF_SELECTED: 0x9400,\r\n    INVALID_OFFSET: 0x9402,\r\n    FILE_NOT_FOUND: 0x9404,\r\n    INCONSISTENT_FILE: 0x9408,\r\n    ALGORITHM_NOT_SUPPORTED: 0x9484,\r\n    INVALID_KCV: 0x9485,\r\n    CODE_NOT_INITIALIZED: 0x9802,\r\n    ACCESS_CONDITION_NOT_FULFILLED: 0x9804,\r\n    CONTRADICTION_SECRET_CODE_STATUS: 0x9808,\r\n    CONTRADICTION_INVALIDATION: 0x9810,\r\n    CODE_BLOCKED: 0x9840,\r\n    MAX_VALUE_REACHED: 0x9850,\r\n    GP_AUTH_FAILED: 0x6300,\r\n    LICENSING: 0x6f42,\r\n    HALTED: 0x6faa,\r\n};\r\nfunction getAltStatusMessage(code) {\r\n    switch (code) {\r\n        // improve text of most common errors\r\n        case 0x6700:\r\n            return \"Incorrect length\";\r\n        case 0x6800:\r\n            return \"Missing critical parameter\";\r\n        case 0x6982:\r\n            return \"Security not satisfied (dongle locked or have invalid access rights)\";\r\n        case 0x6985:\r\n            return \"Condition of use not satisfied (denied by the user?)\";\r\n        case 0x6a80:\r\n            return \"Invalid data received\";\r\n        case 0x6b00:\r\n            return \"Invalid parameter received\";\r\n    }\r\n    if (0x6f00 <= code && code <= 0x6fff) {\r\n        return \"Internal error, please report\";\r\n    }\r\n}\r\n/**\r\n * Error thrown when a device returned a non success status.\r\n * the error.statusCode is one of the `StatusCodes` exported by this library.\r\n */\r\nfunction TransportStatusError(statusCode) {\r\n    this.name = \"TransportStatusError\";\r\n    var statusText = Object.keys(StatusCodes).find(function (k) { return StatusCodes[k] === statusCode; }) ||\r\n        \"UNKNOWN_ERROR\";\r\n    var smsg = getAltStatusMessage(statusCode) || statusText;\r\n    var statusCodeStr = statusCode.toString(16);\r\n    this.message = \"Ledger device: \" + smsg + \" (0x\" + statusCodeStr + \")\";\r\n    this.stack = new Error().stack;\r\n    this.statusCode = statusCode;\r\n    this.statusText = statusText;\r\n}\r\nTransportStatusError.prototype = new Error();\r\naddCustomErrorDeserializer(\"TransportStatusError\", function (e) { return new TransportStatusError(e.statusCode); });\n\nexport { AccountNameRequiredError, AccountNotSupported, AmountRequired, BluetoothRequired, BtcUnmatchedApp, CantOpenDevice, CantScanQRCode, CashAddrNotSupported, CurrencyNotSupported, DBNotReset, DBWrongPassword, DeviceAppVerifyNotSupported, DeviceGenuineSocketEarlyClose, DeviceHalted, DeviceInOSUExpected, DeviceNameInvalid, DeviceNotGenuineError, DeviceOnDashboardExpected, DeviceOnDashboardUnexpected, DeviceShouldStayInApp, DeviceSocketFail, DeviceSocketNoBulkStatus, DisconnectedDevice, DisconnectedDeviceDuringOperation, ETHAddressNonEIP, EnpointConfigError, EthAppPleaseEnableContractData, FeeEstimationFailed, FeeNotLoaded, FeeRequired, FeeTooHigh, FirmwareNotRecognized, FirmwareOrAppUpdateRequired, GasLessThanEstimate, GenuineCheckFailed, HardResetFail, InvalidAddress, InvalidAddressBecauseDestinationIsAlsoSource, InvalidXRPTag, LatestMCUInstalledError, LedgerAPI4xx, LedgerAPI5xx, LedgerAPIError, LedgerAPIErrorWithMessage, LedgerAPINotAvailable, MCUNotGenuineToDashboard, ManagerAppAlreadyInstalledError, ManagerAppDepInstallRequired, ManagerAppDepUninstallRequired, ManagerAppRelyOnBTCError, ManagerDeviceLockedError, ManagerFirmwareNotEnoughSpaceError, ManagerNotEnoughSpaceError, ManagerUninstallBTCDep, NetworkDown, NoAccessToCamera, NoAddressesFound, NoDBPathGiven, NotEnoughBalance, NotEnoughBalanceBecauseDestinationNotCreated, NotEnoughBalanceInParentAccount, NotEnoughBalanceToDelegate, NotEnoughGas, NotEnoughSpendableBalance, NotSupportedLegacyAddress, PairingFailed, PasswordIncorrectError, PasswordsDontMatchError, RecipientRequired, RecommendSubAccountsToEmpty, RecommendUndelegation, StatusCodes, SyncError, TimeoutTagged, TransportError, TransportInterfaceNotAvailable, TransportOpenUserCancelled, TransportRaceCondition, TransportStatusError, TransportWebUSBGestureRequired, UnavailableTezosOriginatedAccountReceive, UnavailableTezosOriginatedAccountSend, UnexpectedBootloader, UnknownMCU, UpdateFetchFileFail, UpdateIncorrectHash, UpdateIncorrectSig, UpdateYourApp, UserRefusedAddress, UserRefusedAllowManager, UserRefusedDeviceNameChange, UserRefusedFirmwareUpdate, UserRefusedOnDevice, WebsocketConnectionError, WebsocketConnectionFailed, WrongAppForCurrency, WrongDeviceForAccount, addCustomErrorDeserializer, createCustomErrorClass, deserializeError, getAltStatusMessage, serializeError };\n"],"sourceRoot":""}