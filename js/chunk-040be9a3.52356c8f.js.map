{"version":3,"sources":["webpack:///./node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/object.js","webpack:///./node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/signature.js","webpack:///./node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/index.js","webpack:///./node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/hash.js","webpack:///./node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/address.js","webpack:///./node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/externals.js","webpack:///./node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/bytes.js","webpack:///./node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/account.js","webpack:///./node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/constants.js","webpack:///./node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/types.js","webpack:///./node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/helpers.js"],"names":["__createBinding","this","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","hasOwnProperty","call","__importDefault","exports","defineProperties","assert_1","ethjsUtil","rlp","bytes_1","self","fields","data","raw","_fields","toJSON","label","obj","forEach","field","toString","baToJSON","serialize","encode","i","getter","setter","toBuffer","allowZero","Buffer","allocUnsafe","allowLess","length","unpadBuffer","default","name","push","configurable","set","alias","from","stripHexPrefix","isBuffer","decode","Array","isArray","Error","d","keys","indexOf","hashPersonalMessage","isValidSignature","fromRpcSig","toRpcSig","ecrecover","ecsign","secp256k1_1","bn_js_1","hash_1","helpers_1","types_1","msgHash","privateKey","chainId","signature","recid","recovery","ecdsaSign","r","slice","s","Number","isSafeInteger","chainIdBN","toType","TypeOutput","BN","muln","addn","toArrayLike","calculateSigRecovery","vBN","subn","sub","isValidSigRecovery","rec","eqn","concat","setLengthLeft","senderPubKey","ecdsaRecover","toNumber","publicKeyConvert","bufferToHex","sig","buf","bufferToInt","homesteadOrLater","SECP256K1_N_DIV_2","SECP256K1_N","rBN","sBN","isZero","gt","cmp","message","assertIsBuffer","prefix","keccak","__exportStar","p","rlphash","ripemd160FromArray","ripemd160FromString","ripemd160","sha256FromArray","sha256FromString","sha256","keccakFromArray","keccakFromHexString","keccakFromString","keccak256","keccak_1","createHash","a","bits","keccak224","keccak384","keccak512","assertIsString","assertIsHexString","assertIsArray","_sha256","update","digest","_ripemd160","padded","hash","Address","account_1","zeros","str","isValidAddress","pubKey","pubToAddress","privateToAddress","nonce","isBN","generateAddress","salt","initCode","generateAddress2","address","equals","zero","addressBN","rangeMin","rangeMax","gte","lte","addHexPrefix","toUnsigned","fromSigned","unpadHexString","unpadArray","setLengthRight","ethjs_util_1","bytes","fill","setLength","msg","right","copy","stripZeros","first","Uint8Array","isHexString","padToEven","intToBuffer","toArray","num","fromTwos","toTwos","isHexPrefixed","ba","array","isZeroAddress","zeroAddress","importPublic","privateToPublic","publicToAddress","isValidPublic","isValidPrivate","isValidChecksumAddress","toChecksumAddress","Account","constants_1","balance","stateRoot","KECCAK256_RLP","codeHash","KECCAK256_NULL","_validate","accountData","serialized","values","fromValuesArray","lt","bnToRlp","hexAddress","e","test","eip1191ChainId","toLowerCase","ret","parseInt","toUpperCase","nonceBN","privateKeyVerify","publicKey","sanitize","publicKeyVerify","publicKeyCreate","addressLength","addr","zeroAddr","KECCAK256_RLP_S","KECCAK256_RLP_ARRAY","KECCAK256_RLP_ARRAY_S","KECCAK256_NULL_S","TWO_POW256","MAX_INTEGER","bnToHex","input","outputType","bn","max","MAX_SAFE_INTEGER"],"mappings":"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","file":"js/chunk-040be9a3.52356c8f.js","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defineProperties = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst ethjsUtil = __importStar(require(\"ethjs-util\"));\nconst rlp = __importStar(require(\"rlp\"));\nconst bytes_1 = require(\"./bytes\");\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @param self the `Object` to define properties on\n * @param fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param data data to be validated against the definitions\n * @deprecated\n */\nexports.defineProperties = function (self, fields, data) {\n    self.raw = [];\n    self._fields = [];\n    // attach the `toJSON`\n    self.toJSON = function (label = false) {\n        if (label) {\n            const obj = {};\n            self._fields.forEach((field) => {\n                obj[field] = `0x${self[field].toString('hex')}`;\n            });\n            return obj;\n        }\n        return bytes_1.baToJSON(self.raw);\n    };\n    self.serialize = function serialize() {\n        return rlp.encode(self.raw);\n    };\n    fields.forEach((field, i) => {\n        self._fields.push(field.name);\n        function getter() {\n            return self.raw[i];\n        }\n        function setter(v) {\n            v = bytes_1.toBuffer(v);\n            if (v.toString('hex') === '00' && !field.allowZero) {\n                v = Buffer.allocUnsafe(0);\n            }\n            if (field.allowLess && field.length) {\n                v = bytes_1.unpadBuffer(v);\n                assert_1.default(field.length >= v.length, `The field ${field.name} must not have more ${field.length} bytes`);\n            }\n            else if (!(field.allowZero && v.length === 0) && field.length) {\n                assert_1.default(field.length === v.length, `The field ${field.name} must have byte length of ${field.length}`);\n            }\n            self.raw[i] = v;\n        }\n        Object.defineProperty(self, field.name, {\n            enumerable: true,\n            configurable: true,\n            get: getter,\n            set: setter,\n        });\n        if (field.default) {\n            self[field.name] = field.default;\n        }\n        // attach alias\n        if (field.alias) {\n            Object.defineProperty(self, field.alias, {\n                enumerable: false,\n                configurable: true,\n                set: setter,\n                get: getter,\n            });\n        }\n    });\n    // if the constuctor is passed data\n    if (data) {\n        if (typeof data === 'string') {\n            data = Buffer.from(ethjsUtil.stripHexPrefix(data), 'hex');\n        }\n        if (Buffer.isBuffer(data)) {\n            data = rlp.decode(data);\n        }\n        if (Array.isArray(data)) {\n            if (data.length > self._fields.length) {\n                throw new Error('wrong number of fields in data');\n            }\n            // make sure all the items are buffers\n            data.forEach((d, i) => {\n                self[self._fields[i]] = bytes_1.toBuffer(d);\n            });\n        }\n        else if (typeof data === 'object') {\n            const keys = Object.keys(data);\n            fields.forEach((field) => {\n                if (keys.indexOf(field.name) !== -1)\n                    self[field.name] = data[field.name];\n                if (keys.indexOf(field.alias) !== -1)\n                    self[field.alias] = data[field.alias];\n            });\n        }\n        else {\n            throw new Error('invalid data');\n        }\n    }\n};\n//# sourceMappingURL=object.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\nconst secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bytes_1 = require(\"./bytes\");\nconst hash_1 = require(\"./hash\");\nconst helpers_1 = require(\"./helpers\");\nconst types_1 = require(\"./types\");\nfunction ecsign(msgHash, privateKey, chainId) {\n    const { signature, recid: recovery } = secp256k1_1.ecdsaSign(msgHash, privateKey);\n    const r = Buffer.from(signature.slice(0, 32));\n    const s = Buffer.from(signature.slice(32, 64));\n    if (!chainId || typeof chainId === 'number') {\n        // return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)\n        if (chainId && !Number.isSafeInteger(chainId)) {\n            throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n        }\n        const v = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;\n        return { r, s, v };\n    }\n    const chainIdBN = types_1.toType(chainId, types_1.TypeOutput.BN);\n    const v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer);\n    return { r, s, v };\n}\nexports.ecsign = ecsign;\nfunction calculateSigRecovery(v, chainId) {\n    const vBN = types_1.toType(v, types_1.TypeOutput.BN);\n    if (!chainId) {\n        return vBN.subn(27);\n    }\n    const chainIdBN = types_1.toType(chainId, types_1.TypeOutput.BN);\n    return vBN.sub(chainIdBN.muln(2).addn(35));\n}\nfunction isValidSigRecovery(recovery) {\n    const rec = new bn_js_1.default(recovery);\n    return rec.eqn(0) || rec.eqn(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * @returns Recovered public key\n */\nexports.ecrecover = function (msgHash, v, r, s, chainId) {\n    const signature = Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32)], 64);\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    const senderPubKey = secp256k1_1.ecdsaRecover(signature, recovery.toNumber(), msgHash);\n    return Buffer.from(secp256k1_1.publicKeyConvert(senderPubKey, false).slice(1));\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * @returns Signature\n */\nexports.toRpcSig = function (v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n */\nexports.fromRpcSig = function (sig) {\n    const buf = bytes_1.toBuffer(sig);\n    if (buf.length < 65) {\n        throw new Error('Invalid signature length');\n    }\n    let v = bytes_1.bufferToInt(buf.slice(64));\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v += 27;\n    }\n    return {\n        v: v,\n        r: buf.slice(0, 32),\n        s: buf.slice(32, 64),\n    };\n};\n/**\n * Validate a ECDSA signature.\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nexports.isValidSignature = function (v, r, s, homesteadOrLater = true, chainId) {\n    const SECP256K1_N_DIV_2 = new bn_js_1.default('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n    const SECP256K1_N = new bn_js_1.default('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    const rBN = new bn_js_1.default(r);\n    const sBN = new bn_js_1.default(s);\n    if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n        return false;\n    }\n    if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n        return false;\n    }\n    return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nexports.hashPersonalMessage = function (message) {\n    helpers_1.assertIsBuffer(message);\n    const prefix = Buffer.from(`\\u0019Ethereum Signed Message:\\n${message.length.toString()}`, 'utf-8');\n    return hash_1.keccak(Buffer.concat([prefix, message]));\n};\n//# sourceMappingURL=signature.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path=\"./@types/ethjs-util/index.ts\"/>\n/**\n * Constants\n */\n__exportStar(require(\"./constants\"), exports);\n/**\n * Account class and helper functions\n */\n__exportStar(require(\"./account\"), exports);\n/**\n * Address type\n */\n__exportStar(require(\"./address\"), exports);\n/**\n * Hash functions\n */\n__exportStar(require(\"./hash\"), exports);\n/**\n * ECDSA signature\n */\n__exportStar(require(\"./signature\"), exports);\n/**\n * Utilities for manipulating Buffers, byte arrays, etc.\n */\n__exportStar(require(\"./bytes\"), exports);\n/**\n * Function for definining properties on an object\n */\n__exportStar(require(\"./object\"), exports);\n/**\n * External exports (BN, rlp, secp256k1)\n */\n__exportStar(require(\"./externals\"), exports);\n/**\n * Helpful TypeScript types\n */\n__exportStar(require(\"./types\"), exports);\n/**\n * Export ethjs-util methods\n */\n__exportStar(require(\"ethjs-util\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\nconst createHash = require('create-hash');\nconst rlp = __importStar(require(\"rlp\"));\nconst bytes_1 = require(\"./bytes\");\nconst helpers_1 = require(\"./helpers\");\n/**\n * Creates Keccak hash of a Buffer input\n * @param a The input data (Buffer)\n * @param bits (number = 256) The Keccak width\n */\nexports.keccak = function (a, bits = 256) {\n    helpers_1.assertIsBuffer(a);\n    switch (bits) {\n        case 224: {\n            return keccak_1.keccak224(a);\n        }\n        case 256: {\n            return keccak_1.keccak256(a);\n        }\n        case 384: {\n            return keccak_1.keccak384(a);\n        }\n        case 512: {\n            return keccak_1.keccak512(a);\n        }\n        default: {\n            throw new Error(`Invald algorithm: keccak${bits}`);\n        }\n    }\n};\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer)\n */\nexports.keccak256 = function (a) {\n    return exports.keccak(a);\n};\n/**\n * Creates Keccak hash of a utf-8 string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nexports.keccakFromString = function (a, bits = 256) {\n    helpers_1.assertIsString(a);\n    const buf = Buffer.from(a, 'utf8');\n    return exports.keccak(buf, bits);\n};\n/**\n * Creates Keccak hash of an 0x-prefixed string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nexports.keccakFromHexString = function (a, bits = 256) {\n    helpers_1.assertIsHexString(a);\n    return exports.keccak(bytes_1.toBuffer(a), bits);\n};\n/**\n * Creates Keccak hash of a number array input\n * @param a The input data (number[])\n * @param bits (number = 256) The Keccak width\n */\nexports.keccakFromArray = function (a, bits = 256) {\n    helpers_1.assertIsArray(a);\n    return exports.keccak(bytes_1.toBuffer(a), bits);\n};\n/**\n * Creates SHA256 hash of an input.\n * @param  a The input data (Buffer|Array|String)\n */\nconst _sha256 = function (a) {\n    a = bytes_1.toBuffer(a);\n    return createHash('sha256').update(a).digest();\n};\n/**\n * Creates SHA256 hash of a Buffer input.\n * @param a The input data (Buffer)\n */\nexports.sha256 = function (a) {\n    helpers_1.assertIsBuffer(a);\n    return _sha256(a);\n};\n/**\n * Creates SHA256 hash of a string input.\n * @param a The input data (string)\n */\nexports.sha256FromString = function (a) {\n    helpers_1.assertIsString(a);\n    return _sha256(a);\n};\n/**\n * Creates SHA256 hash of a number[] input.\n * @param a The input data (number[])\n */\nexports.sha256FromArray = function (a) {\n    helpers_1.assertIsArray(a);\n    return _sha256(a);\n};\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\nconst _ripemd160 = function (a, padded) {\n    a = bytes_1.toBuffer(a);\n    const hash = createHash('rmd160').update(a).digest();\n    if (padded === true) {\n        return bytes_1.setLengthLeft(hash, 32);\n    }\n    else {\n        return hash;\n    }\n};\n/**\n * Creates RIPEMD160 hash of a Buffer input.\n * @param a The input data (Buffer)\n * @param padded Whether it should be padded to 256 bits or not\n */\nexports.ripemd160 = function (a, padded) {\n    helpers_1.assertIsBuffer(a);\n    return _ripemd160(a, padded);\n};\n/**\n * Creates RIPEMD160 hash of a string input.\n * @param a The input data (String)\n * @param padded Whether it should be padded to 256 bits or not\n */\nexports.ripemd160FromString = function (a, padded) {\n    helpers_1.assertIsString(a);\n    return _ripemd160(a, padded);\n};\n/**\n * Creates RIPEMD160 hash of a number[] input.\n * @param a The input data (number[])\n * @param padded Whether it should be padded to 256 bits or not\n */\nexports.ripemd160FromArray = function (a, padded) {\n    helpers_1.assertIsArray(a);\n    return _ripemd160(a, padded);\n};\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\nexports.rlphash = function (a) {\n    return exports.keccak(rlp.encode(a));\n};\n//# sourceMappingURL=hash.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Address = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bytes_1 = require(\"./bytes\");\nconst account_1 = require(\"./account\");\nclass Address {\n    constructor(buf) {\n        assert_1.default(buf.length === 20, 'Invalid address length');\n        this.buf = buf;\n    }\n    /**\n     * Returns the zero address.\n     */\n    static zero() {\n        return new Address(bytes_1.zeros(20));\n    }\n    /**\n     * Returns an Address object from a hex-encoded string.\n     * @param str - Hex-encoded address\n     */\n    static fromString(str) {\n        assert_1.default(account_1.isValidAddress(str), 'Invalid address');\n        return new Address(bytes_1.toBuffer(str));\n    }\n    /**\n     * Returns an address for a given public key.\n     * @param pubKey The two points of an uncompressed key\n     */\n    static fromPublicKey(pubKey) {\n        assert_1.default(Buffer.isBuffer(pubKey), 'Public key should be Buffer');\n        const buf = account_1.pubToAddress(pubKey);\n        return new Address(buf);\n    }\n    /**\n     * Returns an address for a given private key.\n     * @param privateKey A private key must be 256 bits wide\n     */\n    static fromPrivateKey(privateKey) {\n        assert_1.default(Buffer.isBuffer(privateKey), 'Private key should be Buffer');\n        const buf = account_1.privateToAddress(privateKey);\n        return new Address(buf);\n    }\n    /**\n     * Generates an address for a newly created contract.\n     * @param from The address which is creating this new address\n     * @param nonce The nonce of the from account\n     */\n    static generate(from, nonce) {\n        assert_1.default(bn_js_1.default.isBN(nonce));\n        return new Address(account_1.generateAddress(from.buf, nonce.toArrayLike(Buffer)));\n    }\n    /**\n     * Generates an address for a contract created using CREATE2.\n     * @param from The address which is creating this new address\n     * @param salt A salt\n     * @param initCode The init code of the contract being created\n     */\n    static generate2(from, salt, initCode) {\n        assert_1.default(Buffer.isBuffer(salt));\n        assert_1.default(Buffer.isBuffer(initCode));\n        return new Address(account_1.generateAddress2(from.buf, salt, initCode));\n    }\n    /**\n     * Is address equal to another.\n     */\n    equals(address) {\n        return this.buf.equals(address.buf);\n    }\n    /**\n     * Is address zero.\n     */\n    isZero() {\n        return this.equals(Address.zero());\n    }\n    /**\n     * True if address is in the address range defined\n     * by EIP-1352\n     */\n    isPrecompileOrSystemAddress() {\n        const addressBN = new bn_js_1.default(this.buf);\n        const rangeMin = new bn_js_1.default(0);\n        const rangeMax = new bn_js_1.default('ffff', 'hex');\n        return addressBN.gte(rangeMin) && addressBN.lte(rangeMax);\n    }\n    /**\n     * Returns hex encoding of address.\n     */\n    toString() {\n        return '0x' + this.buf.toString('hex');\n    }\n    /**\n     * Returns Buffer representation of address.\n     */\n    toBuffer() {\n        return Buffer.from(this.buf);\n    }\n}\nexports.Address = Address;\n//# sourceMappingURL=address.js.map","\"use strict\";\n/**\n * Re-exports commonly used modules:\n * * Exports [`BN`](https://github.com/indutny/bn.js), [`rlp`](https://github.com/ethereumjs/rlp).\n * @packageDocumentation\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.rlp = exports.BN = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nexports.BN = bn_js_1.default;\nconst rlp = __importStar(require(\"rlp\"));\nexports.rlp = rlp;\n//# sourceMappingURL=externals.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.baToJSON = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst ethjs_util_1 = require(\"ethjs-util\");\nconst helpers_1 = require(\"./helpers\");\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nexports.zeros = function (bytes) {\n    return Buffer.allocUnsafe(bytes).fill(0);\n};\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\nconst setLength = function (msg, length, right) {\n    const buf = exports.zeros(length);\n    if (right) {\n        if (msg.length < length) {\n            msg.copy(buf);\n            return buf;\n        }\n        return msg.slice(0, length);\n    }\n    else {\n        if (msg.length < length) {\n            msg.copy(buf, length - msg.length);\n            return buf;\n        }\n        return msg.slice(-length);\n    }\n};\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexports.setLengthLeft = function (msg, length) {\n    helpers_1.assertIsBuffer(msg);\n    return setLength(msg, length, false);\n};\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexports.setLengthRight = function (msg, length) {\n    helpers_1.assertIsBuffer(msg);\n    return setLength(msg, length, true);\n};\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nconst stripZeros = function (a) {\n    let first = a[0];\n    while (a.length > 0 && first.toString() === '0') {\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n};\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\nexports.unpadBuffer = function (a) {\n    helpers_1.assertIsBuffer(a);\n    return stripZeros(a);\n};\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\nexports.unpadArray = function (a) {\n    helpers_1.assertIsArray(a);\n    return stripZeros(a);\n};\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\nexports.unpadHexString = function (a) {\n    helpers_1.assertIsHexString(a);\n    a = ethjs_util_1.stripHexPrefix(a);\n    return stripZeros(a);\n};\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\nexports.toBuffer = function (v) {\n    if (v === null || v === undefined) {\n        return Buffer.allocUnsafe(0);\n    }\n    if (Buffer.isBuffer(v)) {\n        return Buffer.from(v);\n    }\n    if (Array.isArray(v) || v instanceof Uint8Array) {\n        return Buffer.from(v);\n    }\n    if (typeof v === 'string') {\n        if (!ethjs_util_1.isHexString(v)) {\n            throw new Error(`Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`);\n        }\n        return Buffer.from(ethjs_util_1.padToEven(ethjs_util_1.stripHexPrefix(v)), 'hex');\n    }\n    if (typeof v === 'number') {\n        return ethjs_util_1.intToBuffer(v);\n    }\n    if (bn_js_1.default.isBN(v)) {\n        return v.toArrayLike(Buffer);\n    }\n    if (v.toArray) {\n        // converts a BN to a Buffer\n        return Buffer.from(v.toArray());\n    }\n    if (v.toBuffer) {\n        return Buffer.from(v.toBuffer());\n    }\n    throw new Error('invalid type');\n};\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nexports.bufferToInt = function (buf) {\n    return new bn_js_1.default(exports.toBuffer(buf)).toNumber();\n};\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nexports.bufferToHex = function (buf) {\n    buf = exports.toBuffer(buf);\n    return '0x' + buf.toString('hex');\n};\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nexports.fromSigned = function (num) {\n    return new bn_js_1.default(num).fromTwos(256);\n};\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nexports.toUnsigned = function (num) {\n    return Buffer.from(num.toTwos(256).toArray());\n};\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nexports.addHexPrefix = function (str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return ethjs_util_1.isHexPrefixed(str) ? str : '0x' + str;\n};\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nexports.baToJSON = function (ba) {\n    if (Buffer.isBuffer(ba)) {\n        return `0x${ba.toString('hex')}`;\n    }\n    else if (ba instanceof Array) {\n        const array = [];\n        for (let i = 0; i < ba.length; i++) {\n            array.push(exports.baToJSON(ba[i]));\n        }\n        return array;\n    }\n};\n//# sourceMappingURL=bytes.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst rlp = __importStar(require(\"rlp\"));\nconst secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\nconst ethjs_util_1 = require(\"ethjs-util\");\nconst constants_1 = require(\"./constants\");\nconst bytes_1 = require(\"./bytes\");\nconst hash_1 = require(\"./hash\");\nconst helpers_1 = require(\"./helpers\");\nconst types_1 = require(\"./types\");\nclass Account {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating an Account from varying data types.\n     */\n    constructor(nonce = new bn_js_1.default(0), balance = new bn_js_1.default(0), stateRoot = constants_1.KECCAK256_RLP, codeHash = constants_1.KECCAK256_NULL) {\n        this.nonce = nonce;\n        this.balance = balance;\n        this.stateRoot = stateRoot;\n        this.codeHash = codeHash;\n        this._validate();\n    }\n    static fromAccountData(accountData) {\n        const { nonce, balance, stateRoot, codeHash } = accountData;\n        return new Account(nonce ? new bn_js_1.default(bytes_1.toBuffer(nonce)) : undefined, balance ? new bn_js_1.default(bytes_1.toBuffer(balance)) : undefined, stateRoot ? bytes_1.toBuffer(stateRoot) : undefined, codeHash ? bytes_1.toBuffer(codeHash) : undefined);\n    }\n    static fromRlpSerializedAccount(serialized) {\n        const values = rlp.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized account input. Must be array');\n        }\n        return this.fromValuesArray(values);\n    }\n    static fromValuesArray(values) {\n        const [nonce, balance, stateRoot, codeHash] = values;\n        return new Account(new bn_js_1.default(nonce), new bn_js_1.default(balance), stateRoot, codeHash);\n    }\n    _validate() {\n        if (this.nonce.lt(new bn_js_1.default(0))) {\n            throw new Error('nonce must be greater than zero');\n        }\n        if (this.balance.lt(new bn_js_1.default(0))) {\n            throw new Error('balance must be greater than zero');\n        }\n        if (this.stateRoot.length !== 32) {\n            throw new Error('stateRoot must have a length of 32');\n        }\n        if (this.codeHash.length !== 32) {\n            throw new Error('codeHash must have a length of 32');\n        }\n    }\n    /**\n     * Returns a Buffer Array of the raw Buffers for the account, in order.\n     */\n    raw() {\n        return [types_1.bnToRlp(this.nonce), types_1.bnToRlp(this.balance), this.stateRoot, this.codeHash];\n    }\n    /**\n     * Returns the RLP serialization of the account as a `Buffer`.\n     */\n    serialize() {\n        return rlp.encode(this.raw());\n    }\n    /**\n     * Returns a `Boolean` determining if the account is a contract.\n     */\n    isContract() {\n        return !this.codeHash.equals(constants_1.KECCAK256_NULL);\n    }\n    /**\n     * Returns a `Boolean` determining if the account is empty complying to the definition of\n     * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n     * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n     */\n    isEmpty() {\n        return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(constants_1.KECCAK256_NULL);\n    }\n}\nexports.Account = Account;\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\nexports.isValidAddress = function (hexAddress) {\n    try {\n        helpers_1.assertIsString(hexAddress);\n    }\n    catch (e) {\n        return false;\n    }\n    return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\n/**\n * Returns a checksummed address.\n *\n * If a eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ. As of 2019-06-26, the most commonly\n * used variation in Ethereum was without the chainId. This may change in the future.\n */\nexports.toChecksumAddress = function (hexAddress, eip1191ChainId) {\n    helpers_1.assertIsHexString(hexAddress);\n    const address = ethjs_util_1.stripHexPrefix(hexAddress).toLowerCase();\n    let prefix = '';\n    if (eip1191ChainId) {\n        const chainId = types_1.toType(eip1191ChainId, types_1.TypeOutput.BN);\n        prefix = chainId.toString() + '0x';\n    }\n    const hash = hash_1.keccakFromString(prefix + address).toString('hex');\n    let ret = '0x';\n    for (let i = 0; i < address.length; i++) {\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += address[i].toUpperCase();\n        }\n        else {\n            ret += address[i];\n        }\n    }\n    return ret;\n};\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\nexports.isValidChecksumAddress = function (hexAddress, eip1191ChainId) {\n    return exports.isValidAddress(hexAddress) && exports.toChecksumAddress(hexAddress, eip1191ChainId) === hexAddress;\n};\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\nexports.generateAddress = function (from, nonce) {\n    helpers_1.assertIsBuffer(from);\n    helpers_1.assertIsBuffer(nonce);\n    const nonceBN = new bn_js_1.default(nonce);\n    if (nonceBN.isZero()) {\n        // in RLP we want to encode null in the case of zero nonce\n        // read the RLP documentation for an answer if you dare\n        return hash_1.rlphash([from, null]).slice(-20);\n    }\n    // Only take the lower 160bits of the hash\n    return hash_1.rlphash([from, Buffer.from(nonceBN.toArray())]).slice(-20);\n};\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\nexports.generateAddress2 = function (from, salt, initCode) {\n    helpers_1.assertIsBuffer(from);\n    helpers_1.assertIsBuffer(salt);\n    helpers_1.assertIsBuffer(initCode);\n    assert_1.default(from.length === 20);\n    assert_1.default(salt.length === 32);\n    const address = hash_1.keccak256(Buffer.concat([Buffer.from('ff', 'hex'), from, salt, hash_1.keccak256(initCode)]));\n    return address.slice(-20);\n};\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\nexports.isValidPrivate = function (privateKey) {\n    return secp256k1_1.privateKeyVerify(privateKey);\n};\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nexports.isValidPublic = function (publicKey, sanitize = false) {\n    helpers_1.assertIsBuffer(publicKey);\n    if (publicKey.length === 64) {\n        // Convert to SEC1 for secp256k1\n        return secp256k1_1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));\n    }\n    if (!sanitize) {\n        return false;\n    }\n    return secp256k1_1.publicKeyVerify(publicKey);\n};\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nexports.pubToAddress = function (pubKey, sanitize = false) {\n    helpers_1.assertIsBuffer(pubKey);\n    if (sanitize && pubKey.length !== 64) {\n        pubKey = Buffer.from(secp256k1_1.publicKeyConvert(pubKey, false).slice(1));\n    }\n    assert_1.default(pubKey.length === 64);\n    // Only take the lower 160bits of the hash\n    return hash_1.keccak(pubKey).slice(-20);\n};\nexports.publicToAddress = exports.pubToAddress;\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nexports.privateToPublic = function (privateKey) {\n    helpers_1.assertIsBuffer(privateKey);\n    // skip the type flag and use the X, Y points\n    return Buffer.from(secp256k1_1.publicKeyCreate(privateKey, false)).slice(1);\n};\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nexports.privateToAddress = function (privateKey) {\n    return exports.publicToAddress(exports.privateToPublic(privateKey));\n};\n/**\n * Converts a public key to the Ethereum format.\n */\nexports.importPublic = function (publicKey) {\n    helpers_1.assertIsBuffer(publicKey);\n    if (publicKey.length !== 64) {\n        publicKey = Buffer.from(secp256k1_1.publicKeyConvert(publicKey, false).slice(1));\n    }\n    return publicKey;\n};\n/**\n * Returns the zero address.\n */\nexports.zeroAddress = function () {\n    const addressLength = 20;\n    const addr = bytes_1.zeros(addressLength);\n    return bytes_1.bufferToHex(addr);\n};\n/**\n * Checks if a given address is the zero address.\n */\nexports.isZeroAddress = function (hexAddress) {\n    try {\n        helpers_1.assertIsString(hexAddress);\n    }\n    catch (e) {\n        return false;\n    }\n    const zeroAddr = exports.zeroAddress();\n    return zeroAddr === hexAddress;\n};\n//# sourceMappingURL=account.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = void 0;\nconst Buffer = require('buffer').Buffer;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\n * The max integer that this VM can handle\n */\nexports.MAX_INTEGER = new bn_js_1.default('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);\n/**\n * 2^256\n */\nexports.TWO_POW256 = new bn_js_1.default('10000000000000000000000000000000000000000000000000000000000000000', 16);\n/**\n * Keccak-256 hash of null\n */\nexports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n/**\n * Keccak-256 hash of null\n */\nexports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');\n/**\n * Keccak-256 hash of the RLP of null\n */\nexports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';\n/**\n * Keccak-256 hash of the RLP of null\n */\nexports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');\n//# sourceMappingURL=constants.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toType = exports.TypeOutput = exports.bnToRlp = exports.bnToHex = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst ethjs_util_1 = require(\"ethjs-util\");\nconst bytes_1 = require(\"./bytes\");\n/**\n * Convert BN to 0x-prefixed hex string.\n */\nfunction bnToHex(value) {\n    return `0x${value.toString(16)}`;\n}\nexports.bnToHex = bnToHex;\n/**\n * Convert value from BN to RLP (unpadded buffer)\n * @param value value to convert\n */\nfunction bnToRlp(value) {\n    // Using `bn.toArrayLike(Buffer)` instead of `bn.toBuffer()`\n    // for compatibility with browserify and similar tools\n    return bytes_1.unpadBuffer(value.toArrayLike(Buffer));\n}\nexports.bnToRlp = bnToRlp;\n/**\n * Type output options\n */\nvar TypeOutput;\n(function (TypeOutput) {\n    TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n    TypeOutput[TypeOutput[\"BN\"] = 1] = \"BN\";\n    TypeOutput[TypeOutput[\"Buffer\"] = 2] = \"Buffer\";\n    TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));\n/**\n * Convert an input to a specified type\n * @param input value to convert\n * @param outputType type to output\n */\nfunction toType(input, outputType) {\n    if (typeof input === 'string' && !ethjs_util_1.isHexString(input)) {\n        throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);\n    }\n    else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n        throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n    }\n    input = bytes_1.toBuffer(input);\n    if (outputType === TypeOutput.Buffer) {\n        return input;\n    }\n    else if (outputType === TypeOutput.BN) {\n        return new bn_js_1.default(input);\n    }\n    else if (outputType === TypeOutput.Number) {\n        const bn = new bn_js_1.default(input);\n        const max = new bn_js_1.default(Number.MAX_SAFE_INTEGER.toString());\n        if (bn.gt(max)) {\n            throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');\n        }\n        return bn.toNumber();\n    }\n    else {\n        // outputType === TypeOutput.PrefixedHexString\n        return `0x${input.toString('hex')}`;\n    }\n}\nexports.toType = toType;\n//# sourceMappingURL=types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\nconst ethjs_util_1 = require(\"ethjs-util\");\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nexports.assertIsHexString = function (input) {\n    if (!ethjs_util_1.isHexString(input)) {\n        const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nexports.assertIsBuffer = function (input) {\n    if (!Buffer.isBuffer(input)) {\n        const msg = `This method only supports Buffer but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nexports.assertIsArray = function (input) {\n    if (!Array.isArray(input)) {\n        const msg = `This method only supports number arrays but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nexports.assertIsString = function (input) {\n    if (typeof input !== 'string') {\n        const msg = `This method only supports strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n//# sourceMappingURL=helpers.js.map"],"sourceRoot":""}