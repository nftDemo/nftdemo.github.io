{"version":3,"sources":["webpack:///./node_modules/bs58check/base.js","webpack:///./node_modules/bnc-onboard/dist/esm/hd-wallet-642b97e3.js","webpack:///./node_modules/bs58check/index.js","webpack:///./node_modules/hdkey/lib/hdkey.js"],"names":["base58","Buffer","module","exports","checksumFn","encode","payload","checksum","concat","length","decodeRaw","buffer","slice","newChecksum","decodeUnsafe","string","decode","Error","publicToAddress","toChecksumAddress","numberToGet","generateAddresses","account","offset","publicKey","chainCode","path","hdk","addresses","i","dkey","deriveChild","address","toString","push","dPath","isValidPath","parts","split","undefined","accountFieldDigit","Number","isNaN","changeFieldDigit","addressFieldDigit","createHash","bs58checkBase","sha256x2","tmp","update","digest","assert","crypto","bs58check","secp256k1","MASTER_SECRET","from","HARDENED_OFFSET","LEN","BITCOIN_VERSIONS","private","public","HDKey","versions","this","depth","index","_privateKey","_publicKey","_fingerprint","parentFingerprint","serialize","hdkey","version","key","allocUnsafe","writeUInt32BE","writeUInt8","fingerprint","copy","hash160","buf","sha","Object","defineProperty","prototype","get","_identifier","identifier","set","value","equal","privateKeyVerify","publicKeyCreate","readUInt32BE","publicKeyVerify","publicKeyConvert","alloc","privateKey","derive","entries","forEach","c","hardened","childIndex","parseInt","test","data","isHardened","indexBuffer","pk","zb","I","createHmac","IL","IR","hd","privateKeyTweakAdd","err","publicKeyTweakAdd","sign","hash","ecdsaSign","signature","verify","ecdsaVerify","Uint8Array","wipePrivateData","randomBytes","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","readUInt8","fromJSON","obj"],"mappings":"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","file":"js/chunk-72a78155.9ef512a1.js","sourcesContent":["'use strict'\n\nvar base58 = require('bs58')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var checksum = checksumFn(payload)\n\n    return base58.encode(Buffer.concat([\n      payload,\n      checksum\n    ], payload.length + 4))\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n","import HDKey from 'hdkey';\nimport * as ethUtil from 'ethereumjs-util';\nimport { Buffer } from 'buffer';\nvar publicToAddress = ethUtil.publicToAddress,\n    toChecksumAddress = ethUtil.toChecksumAddress;\nvar numberToGet = 5;\n\nfunction generateAddresses(account, offset) {\n  var publicKey = account.publicKey,\n      chainCode = account.chainCode,\n      path = account.path;\n  var hdk = new HDKey();\n  hdk.publicKey = new Buffer(publicKey, 'hex');\n  hdk.chainCode = new Buffer(chainCode, 'hex');\n  var addresses = [];\n\n  for (var i = offset; i < numberToGet + offset; i++) {\n    var dkey = hdk.deriveChild(i);\n    var address = publicToAddress(dkey.publicKey, true).toString('hex');\n    addresses.push({\n      dPath: \"\".concat(path, \"/\").concat(i),\n      address: toChecksumAddress(\"0x\".concat(address))\n    });\n  }\n\n  return addresses;\n}\n\nfunction isValidPath(path) {\n  var parts = path.split('/');\n\n  if (parts[0] !== 'm') {\n    return false;\n  }\n\n  if (parts[1] !== \"44'\") {\n    return false;\n  }\n\n  if (parts[2] !== \"60'\" && parts[2] !== \"1'\") {\n    return false;\n  }\n\n  if (parts[3] === undefined) {\n    return true;\n  }\n\n  var accountFieldDigit = Number(parts[3][0]);\n\n  if (isNaN(accountFieldDigit) || accountFieldDigit < 0 || parts[3][1] !== \"'\") {\n    return false;\n  }\n\n  if (parts[4] === undefined) {\n    return true;\n  }\n\n  var changeFieldDigit = Number(parts[4][0]);\n\n  if (isNaN(changeFieldDigit) || changeFieldDigit < 0) {\n    return false;\n  }\n\n  if (parts[5] === undefined) {\n    return true;\n  }\n\n  var addressFieldDigit = Number(parts[5][0]);\n\n  if (isNaN(addressFieldDigit) || addressFieldDigit < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport { generateAddresses, isValidPath };","'use strict'\n\nvar createHash = require('create-hash')\nvar bs58checkBase = require('./base')\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  var tmp = createHash('sha256').update(buffer).digest()\n  return createHash('sha256').update(tmp).digest()\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n","var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar bs58check = require('bs58check')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = Buffer.from(secp256k1.publicKeyCreate(value, true))\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = Buffer.from(secp256k1.publicKeyConvert(value, true)) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(this.privateKey), IL))\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(this.publicKey), IL, true))\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return Buffer.from(secp256k1.ecdsaSign(hash, this.privateKey).signature)\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.ecdsaVerify(\n    Uint8Array.from(signature),\n    Uint8Array.from(hash),\n    Uint8Array.from(this.publicKey)\n  )\n}\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey)\n  this._privateKey = null\n  return this\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = bs58check.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('ripemd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n"],"sourceRoot":""}